min = min(AMT_CREDIT),
max= max(AMT_CREDIT)) %>%
mutate(Percent. = round((customers / sum(customers)) * 100, 1)) %>%
knitr::kable()
# Summarize data by contract type and default
data_summary <- app_train_clean %>%
group_by(NAME_CONTRACT_TYPE, TARGET) %>%
summarize(count = n(), .groups = 'drop') %>%
group_by(NAME_CONTRACT_TYPE) %>%
mutate(total = sum(count),
percentage = (count / total) * 100) %>%
ungroup()
# Extract percentage for TARGET == 0
percentage_target_0 <- data_summary %>%
filter(TARGET == 0) %>%
select(NAME_CONTRACT_TYPE, percentage_target_0 = percentage)
# Order and adjust data for plotting
data_summary_ordered <- data_summary %>%
left_join(percentage_target_0, by = "NAME_CONTRACT_TYPE") %>%
mutate(order = if_else(is.na(percentage_target_0), 0, percentage_target_0)) %>%
arrange(desc(order)) %>%
mutate(NAME_CONTRACT_TYPE = factor(NAME_CONTRACT_TYPE, levels = unique(NAME_CONTRACT_TYPE)))
# Contract type by default
ggplot(data_summary_ordered, aes(x = percentage, y = reorder(NAME_CONTRACT_TYPE, -order), fill = as.factor(TARGET))) +
geom_bar(stat = "identity", position = "stack", alpha = 0.5) +  # Add transparency
geom_text(aes(label = scales::percent(percentage / 100, accuracy = 0.1)),
position = position_stack(vjust = 0.5),
hjust = -0.01,
color = "black", size = 3.2) +
labs(title = "Percentage of Observations by Contract Type and Customer Default",
x = NULL,  # Remove x-axis label
y = NULL) +
scale_x_continuous(labels = NULL, expand = expansion(c(0, 0.05))) +  # Remove x-axis values
scale_fill_manual(values = c("khaki", "darkseagreen"), name = "Customer Default") +
theme_minimal() +
theme(plot.title = element_text(size = 10))+
theme(axis.text.y = element_text(size = 10),
axis.title.x = element_blank(),  # Remove x-axis title
legend.position = "right",
legend.direction = "vertical",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
# Summarize data by income type and default
data_summary <- app_train_clean %>%
group_by(NAME_INCOME_TYPE, TARGET) %>%
summarize(count = n(), .groups = 'drop') %>%
group_by(NAME_INCOME_TYPE) %>%
mutate(total = sum(count),  # Total count per income type
percentage = (count / total) * 100) %>%  # Percentage per income type
ungroup()
# Extract percentage for TARGET == 0
percentage_target_0 <- data_summary %>%
filter(TARGET == 0) %>%
select(NAME_INCOME_TYPE, percentage_target_0 = percentage)
# Order and adjust data for plotting
data_summary_ordered <- data_summary %>%
left_join(percentage_target_0, by = "NAME_INCOME_TYPE") %>%
mutate(order = if_else(is.na(percentage_target_0), 0, percentage_target_0)) %>%
arrange(desc(order)) %>%
mutate(NAME_INCOME_TYPE = factor(NAME_INCOME_TYPE, levels = unique(NAME_INCOME_TYPE)))
# Income by default
ggplot(data_summary_ordered, aes(x = percentage, y = reorder(NAME_INCOME_TYPE, -order), fill = as.factor(TARGET))) +
geom_bar(stat = "identity", position = "stack", alpha = 0.5) +  # Add transparency
geom_text(aes(label = scales::percent(percentage / 100, accuracy = 0.1)),
position = position_stack(vjust = 0.5),
hjust = -0.01,
color = "black", size = 3.2) +
labs(title = "Percentage of Observations by Income Type and Customer Default",
x = NULL,  # Remove x-axis label
y = NULL) +
scale_x_continuous(labels = NULL, expand = expansion(c(0, 0.05))) +  # Remove x-axis values
scale_fill_manual(values = c("khaki", "darkseagreen"), name = "Customer Default") +
theme_minimal() +
theme(plot.title = element_text(size = 10))+
theme(axis.text.y = element_text(size = 10),
axis.title.x = element_blank(),  # Remove x-axis title
legend.position = "right",
legend.direction = "vertical",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
# Loan amount by education and default
ggplot(app_train_clean, aes(x = as.factor(NAME_EDUCATION_TYPE), y = AMT_CREDIT, fill = as.factor(TARGET))) +
geom_boxplot() +
labs(title = "Distribution of the Loan Amount by Education Type and Customer Default",
x = "Education Type",
y = "Amount of the Loan") +
scale_y_continuous(labels = scales::label_number(scale = 1)) +
scale_fill_manual(values = c("khaki", "darkseagreen"), name = "Customer Default") +
theme_minimal() +
theme(plot.title = element_text(size = 10)) +
theme(axis.text.x = element_text(hjust = 0.5)) +  # Center align the x-axis labels
scale_x_discrete(labels = function(x) gsub(" ", "\n", x))  # Replace spaces with newline characters in x-axis labels
# Summarize data by education and default
data_summary <- app_train_clean %>%
group_by(NAME_EDUCATION_TYPE, TARGET) %>%
summarize(count = n(), .groups = 'drop') %>%
group_by(NAME_EDUCATION_TYPE) %>%
mutate(total = sum(count),
percentage = (count / total) * 100) %>%
ungroup()
# Extract percentage for TARGET == 0g
percentage_target_0 <- data_summary %>%
filter(TARGET == 0) %>%
select(NAME_EDUCATION_TYPE, percentage_target_0 = percentage)
# Order and adjust data for plotting
data_summary_ordered <- data_summary %>%
left_join(percentage_target_0, by = "NAME_EDUCATION_TYPE") %>%
mutate(order = if_else(is.na(percentage_target_0), 0, percentage_target_0)) %>%
arrange(desc(order)) %>%
mutate(NAME_EDUCATION_TYPE = factor(NAME_EDUCATION_TYPE, levels = unique(NAME_EDUCATION_TYPE)))
# Education by default
ggplot(data_summary_ordered, aes(x = percentage, y = reorder(NAME_EDUCATION_TYPE, -order), fill = as.factor(TARGET))) +
geom_bar(stat = "identity", position = "stack", alpha = 0.5) +  # Add transparency
geom_text(aes(label = scales::percent(percentage / 100, accuracy = 0.1)),
position = position_stack(vjust = 0.5),
hjust = -0.01,
color = "black", size = 3.2) +
labs(title = "Percentage of Observations by Education level \nand Customer Default",
x = NULL,  # Remove x-axis label
y = NULL) +
scale_x_continuous(labels = NULL, expand = expansion(c(0, 0.05))) +  # Remove x-axis values
scale_fill_manual(values = c("khaki", "darkseagreen"), name = "Customer Default") +
theme_minimal() +
theme(plot.title = element_text(size = 10))+
theme(axis.text.y = element_text(size = 10),
axis.title.x = element_blank(),  # Remove x-axis title
legend.position = "right",
legend.direction = "vertical",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
# Summarize data by family and default
data_summary <- app_train_clean %>%
group_by(NAME_FAMILY_STATUS, TARGET) %>%
summarize(count = n(), .groups = 'drop') %>%
group_by(NAME_FAMILY_STATUS) %>%
mutate(total = sum(count),
percentage = (count / total) * 100) %>%
ungroup()
# Extract percentage for TARGET == 0
percentage_target_0 <- data_summary %>%
filter(TARGET == 0) %>%
select(NAME_FAMILY_STATUS, percentage_target_0 = percentage)
# Order and adjust data for plotting
data_summary_ordered <- data_summary %>%
left_join(percentage_target_0, by = "NAME_FAMILY_STATUS") %>%
mutate(order = if_else(is.na(percentage_target_0), 0, percentage_target_0)) %>%
arrange(desc(order)) %>%
mutate(NAME_FAMILY_STATUS = factor(NAME_FAMILY_STATUS, levels = unique(NAME_FAMILY_STATUS)))
# Family status by default
ggplot(data_summary_ordered, aes(x = percentage, y = reorder(NAME_FAMILY_STATUS, -order), fill = as.factor(TARGET))) +
geom_bar(stat = "identity", position = "stack", alpha = 0.5) +  # Add transparency
geom_text(aes(label = scales::percent(percentage / 100, accuracy = 0.1)),
position = position_stack(vjust = 0.5),
hjust = -0.01,
color = "black", size = 3.2) +
labs(title = "Percentage of Observations by Family Status and Customer Default",
x = NULL,  # Remove x-axis label
y = NULL) +
scale_x_continuous(labels = NULL, expand = expansion(c(0, 0.05))) +  # Remove x-axis values
scale_fill_manual(values = c("khaki", "darkseagreen"), name = "Customer Default") +
theme_minimal() +
theme(plot.title = element_text(size = 10))+
theme(axis.text.y = element_text(size = 10),
axis.title.x = element_blank(),  # Remove x-axis title
legend.position = "right",
legend.direction = "vertical",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
# Summarize data by housing type and default
data_summary <- app_train_clean %>%
group_by(NAME_HOUSING_TYPE, TARGET) %>%
summarize(count = n(), .groups = 'drop') %>%
group_by(NAME_HOUSING_TYPE) %>%
mutate(total = sum(count),
percentage = (count / total) * 100) %>%
ungroup()
# Extract percentage for TARGET == 0
percentage_target_0 <- data_summary %>%
filter(TARGET == 0) %>%
select(NAME_HOUSING_TYPE, percentage_target_0 = percentage)
# Order and adjust data for plotting
data_summary_ordered <- data_summary %>%
left_join(percentage_target_0, by = "NAME_HOUSING_TYPE") %>%
mutate(order = if_else(is.na(percentage_target_0), 0, percentage_target_0)) %>%
arrange(desc(order)) %>%
mutate(NAME_HOUSING_TYPE = factor(NAME_HOUSING_TYPE, levels = unique(NAME_HOUSING_TYPE)))
# Housing by default
ggplot(data_summary_ordered, aes(x = percentage, y = reorder(NAME_HOUSING_TYPE, -order), fill = as.factor(TARGET))) +
geom_bar(stat = "identity", position = "stack", alpha = 0.5) +  # Add transparency
geom_text(aes(label = scales::percent(percentage / 100, accuracy = 0.1)),
position = position_stack(vjust = 0.5),
hjust = -0.01,
color = "black", size = 3.2) +
labs(title = "Percentage of Observations by Housing Type and Customer Default",
x = NULL,  # Remove x-axis label
y = NULL) +
scale_x_continuous(labels = NULL, expand = expansion(c(0, 0.05))) +  # Remove x-axis values
scale_fill_manual(values = c("khaki", "darkseagreen"), name = "Customer Default") +
theme_minimal() +
theme(plot.title = element_text(size = 10))+
theme(axis.text.y = element_text(size = 10),
axis.title.x = element_blank(),  # Remove x-axis title
legend.position = "right",
legend.direction = "vertical",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
# Convert OCCUPATION_TYPE to factor if not already done
app_train_clean$OCCUPATION_TYPE <- as.factor(app_train_clean$OCCUPATION_TYPE)
# Replace empty strings with "Unknown"
app_train_clean$OCCUPATION_TYPE <- as.character(app_train_clean$OCCUPATION_TYPE)  # Convert to character
app_train_clean$OCCUPATION_TYPE[app_train_clean$OCCUPATION_TYPE == ""] <- "Unknown"  # Replace empty strings
app_train_clean$OCCUPATION_TYPE <- as.factor(app_train_clean$OCCUPATION_TYPE)  # Convert back to factor
# Summarize data by occupation type and default
data_summary <- app_train_clean %>%
group_by(OCCUPATION_TYPE, TARGET) %>%
summarize(count = n(), .groups = 'drop') %>%
group_by(OCCUPATION_TYPE) %>%
mutate(total = sum(count),
percentage = (count / total) * 100) %>%
ungroup()
# Extract percentage for TARGET == 0
percentage_target_0 <- data_summary %>%
filter(TARGET == 0) %>%
select(OCCUPATION_TYPE, percentage_target_0 = percentage)
# Order and adjust data for plotting
data_summary_ordered <- data_summary %>%
left_join(percentage_target_0, by = "OCCUPATION_TYPE") %>%
mutate(order = if_else(is.na(percentage_target_0), 0, percentage_target_0)) %>%
arrange(desc(order)) %>%
mutate(OCCUPATION_TYPE = factor(OCCUPATION_TYPE, levels = unique(OCCUPATION_TYPE)))
# Occupation by default
ggplot(data_summary_ordered, aes(x = percentage, y = reorder(OCCUPATION_TYPE, -order), fill = as.factor(TARGET))) +
geom_bar(stat = "identity", position = "stack", alpha = 0.5) +  # Add transparency
geom_text(aes(label = scales::percent(percentage / 100, accuracy = 0.1)),
position = position_stack(vjust = 0.5),
hjust = -0.01,
color = "black", size = 3.2) +
labs(title = "Percentage of Observations by Occupation Type and Customer Default",
x = NULL,  # Remove x-axis label
y = NULL) +
scale_x_continuous(labels = NULL, expand = expansion(c(0, 0.05))) +  # Remove x-axis values
scale_fill_manual(values = c("khaki", "darkseagreen"), name = "Customer Default") +
theme_minimal() +
theme(plot.title = element_text(size = 10))+
theme(axis.text.y = element_text(size = 10),
axis.title.x = element_blank(),  # Remove x-axis title
legend.position = "right",
legend.direction = "vertical",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
# Distribution of loan amount by default
ggplot(app_train_clean, aes(x = as.factor(TARGET), y = AMT_CREDIT, fill = as.factor(TARGET))) +
geom_boxplot() +
labs(title = "Distribution of the loan amount by customer default.",
x = "customer default",
y = "amount of the loan") +
scale_y_continuous(labels = scales::label_number(scale = 1)) +
scale_fill_manual(values = c("khaki", "darkseagreen")) +
theme_minimal() +
theme(plot.title = element_text(size = 10))+
theme(legend.position = "none")
# Histogram - distribution of loan amount by default
ggplot(app_train_clean, aes(x = AMT_CREDIT, fill = as.factor(TARGET))) +
geom_histogram(alpha = 0.6, bins = 30, position = "identity") +
labs(title = "Distribution of the loan amount by customer default.",
x = "amount of the loan",
y = "Frequency") +
scale_x_continuous(labels = scales::label_number(scale = 1)) +
scale_fill_manual(values = c("khaki", "darkseagreen"), name = "customer default") +
theme_minimal() +
theme(plot.title = element_text(size = 10))+
theme(legend.position = "right")
# Income levels
income_b <- app_train_clean %>%
mutate(income_bracket = cut(AMT_INCOME_TOTAL,
breaks = c(seq(0, 2000000, by = 500000), Inf),
labels = c(
"$0 - $500k",
"$500k - $1M",
"$1M - $1,5M",
"$1,5M - $2M",
"Above $2M")))
# Plot for loan by income and default
ggplot(income_b, aes(x = income_bracket, y = AMT_CREDIT, fill = as.factor(TARGET))) +
geom_boxplot() +
labs(title = "Loan Amount by Income Bracket and Customer Default",
x = "Income Bracket",
y = "Loan Amount") +
scale_fill_manual(values = c("khaki", "darkseagreen"), name = "Customer Default") +
scale_y_continuous(labels = scales::label_number(big.mark = ",")) +
theme_minimal() +
theme(plot.title = element_text(size = 10))+
theme(axis.text.x = element_text(),
axis.text.y = element_text(),
legend.position = "right",
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.major.y = element_line(colour = "grey80"),
panel.grid.minor.y = element_blank())
# Function to calculate count and percentage of non-missing and missing values for each EXT_SOURCE
calculate_percentages <- function(data, source) {
data %>%
summarise(
Filled = sum(!is.na(.data[[source]])),
Missing = sum(is.na(.data[[source]])),
Total = n()
) %>%
mutate(
Percent_Filled = (Filled / Total) * 100,
Percent_Missing = (Missing / Total) * 100,
Source = source
) %>%
pivot_longer(cols = c(Filled, Missing), names_to = "Status", values_to = "Count") %>%
pivot_longer(cols = c(Percent_Filled, Percent_Missing), names_to = "Percentage_Status", values_to = "Percentage") %>%
separate(Percentage_Status, into = c("Type", "Status"), sep = "_") %>%
filter(Type == "Percent")
}
# Apply the function to each EXT_SOURCE
ext_source_1 <- calculate_percentages(app_train_clean, "EXT_SOURCE_1")
ext_source_2 <- calculate_percentages(app_train_clean, "EXT_SOURCE_2")
ext_source_3 <- calculate_percentages(app_train_clean, "EXT_SOURCE_3")
# Combining the sources
combined_data <- bind_rows(ext_source_1, ext_source_2, ext_source_3)
# Plot of external source percentages
ggplot(combined_data, aes(x = Source, y = Percentage, fill = Status)) +
geom_col(position = "dodge", alpha = 0.4) +
geom_text(aes(label = round(Percentage, 1)), position = position_dodge(width = 0.9), vjust = -0.5, size = 2.5) +
labs(title = "Percentage of Filled and Missing Values for External Source Variables",
x = "Credit Score Sources",
y = "Percentage (%)") +
scale_fill_manual(values = c("lightblue", "firebrick"), labels = c("Filled", "Missing")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 0, hjust = 0.5),
plot.title = element_text(size = 11))
# Density of ext_source_1 scores by default
ggplot(app_train_clean, aes(x = EXT_SOURCE_1, color = as.factor(TARGET), fill = as.factor(TARGET))) +
stat_density(geom = "line", position = "identity") +
stat_density(geom = "area", position = "identity", alpha = 0.3) +
labs(title = "Density of EXT_SOURCE_1 by Customer Default",
x = "EXT_SOURCE_1",
y = "Density") +
scale_color_manual(values = c("khaki", "darkseagreen"), name = "Customer Default") +
scale_fill_manual(values = c("khaki", "darkseagreen"), name = "Customer Default") +
theme_minimal()+
theme(plot.title = element_text(size = 10))
# Density of ext_source_2 scores by default
ggplot(app_train_clean, aes(x = EXT_SOURCE_2, color = as.factor(TARGET), fill = as.factor(TARGET))) +
stat_density(geom = "line", position = "identity") +
stat_density(geom = "area", position = "identity", alpha = 0.3) +
labs(title = "Density of EXT_SOURCE_1 by Customer Default",
x = "EXT_SOURCE_2",
y = "Density") +
scale_color_manual(values = c("khaki", "darkseagreen"), name = "Customer Default") +
scale_fill_manual(values = c("khaki", "darkseagreen"), name = "Customer Default") +
theme_minimal()+
theme(plot.title = element_text(size = 10))
# Density of ext_source_3 scores by default
ggplot(app_train_clean, aes(x = EXT_SOURCE_3, color = as.factor(TARGET), fill = as.factor(TARGET))) +
stat_density(geom = "line", position = "identity") +
stat_density(geom = "area", position = "identity", alpha = 0.3) +
labs(title = "Density of EXT_SOURCE_1 by Customer Default",
x = "EXT_SOURCE_3",
y = "Density") +
scale_color_manual(values = c("khaki", "darkseagreen"), name = "Customer Default") +
scale_fill_manual(values = c("khaki", "darkseagreen"), name = "Customer Default") +
theme_minimal() +
theme(plot.title = element_text(size = 10))
# Select variables EXT_SOURCE_1, EXT_SOURCE_2, e EXT_SOURCE_3
app_train_filtered <- app_train_clean %>%
select(TARGET, EXT_SOURCE_1, EXT_SOURCE_2, EXT_SOURCE_3) %>%
pivot_longer(cols = starts_with("EXT_SOURCE"),
names_to = "Source",
values_to = "Score") %>%
mutate(Source = factor(Source, levels = c("EXT_SOURCE_1", "EXT_SOURCE_2", "EXT_SOURCE_3")))
# Plot the three variables together
ggplot(app_train_filtered, aes(x = as.factor(TARGET), y = Score, fill = as.factor(TARGET))) +
geom_boxplot() +
labs(title = "Distribution of EXT_SOURCE Scores by Customer Default",
x = "Customer Default",
y = "Score") +
scale_y_continuous(labels = scales::label_number(scale = 1)) +
scale_fill_manual(values = c("khaki", "darkseagreen")) +
theme_minimal() +
theme(plot.title = element_text(size = 10))+
theme(legend.position = "none",
axis.text.x = element_text(size = 8),
axis.text.y = element_text(size = 8)) +
facet_wrap(~Source, scales = "free_y")
# Filter dataset to include only rows where EXT_SOURCE variables are not missing
app_train_clean_filtered <- app_train_clean %>%
filter(!is.na(EXT_SOURCE_1) | !is.na(EXT_SOURCE_2) | !is.na(EXT_SOURCE_3))
# Define intervals for EXT_SOURCE variables with "> 0.9" at the end
app_train_clean_filtered <- app_train_clean_filtered %>%
mutate(score_levels_1 = case_when(
EXT_SOURCE_1 <= 0.1 ~ "0 - 0.1",
EXT_SOURCE_1 <= 0.2 ~ "0.1 - 0.2",
EXT_SOURCE_1 <= 0.3 ~ "0.2 - 0.3",
EXT_SOURCE_1 <= 0.4 ~ "0.3 - 0.4",
EXT_SOURCE_1 <= 0.5 ~ "0.4 - 0.5",
EXT_SOURCE_1 <= 0.6 ~ "0.5 - 0.6",
EXT_SOURCE_1 <= 0.7 ~ "0.6 - 0.7",
EXT_SOURCE_1 <= 0.8 ~ "0.7 - 0.8",
EXT_SOURCE_1 <= 0.9 ~ "0.8 - 0.9",
TRUE ~ "> 0.9"
)) %>%
mutate(score_levels_2 = case_when(
EXT_SOURCE_2 <= 0.1 ~ "0 - 0.1",
EXT_SOURCE_2 <= 0.2 ~ "0.1 - 0.2",
EXT_SOURCE_2 <= 0.3 ~ "0.2 - 0.3",
EXT_SOURCE_2 <= 0.4 ~ "0.3 - 0.4",
EXT_SOURCE_2 <= 0.5 ~ "0.4 - 0.5",
EXT_SOURCE_2 <= 0.6 ~ "0.5 - 0.6",
EXT_SOURCE_2 <= 0.7 ~ "0.6 - 0.7",
EXT_SOURCE_2 <= 0.8 ~ "0.7 - 0.8",
EXT_SOURCE_2 <= 0.9 ~ "0.8 - 0.9",
TRUE ~ "> 0.9"
)) %>%
mutate(score_levels_3 = case_when(
EXT_SOURCE_3 <= 0.1 ~ "0 - 0.1",
EXT_SOURCE_3 <= 0.2 ~ "0.1 - 0.2",
EXT_SOURCE_3 <= 0.3 ~ "0.2 - 0.3",
EXT_SOURCE_3 <= 0.4 ~ "0.3 - 0.4",
EXT_SOURCE_3 <= 0.5 ~ "0.4 - 0.5",
EXT_SOURCE_3 <= 0.6 ~ "0.5 - 0.6",
EXT_SOURCE_3 <= 0.7 ~ "0.6 - 0.7",
EXT_SOURCE_3 <= 0.8 ~ "0.7 - 0.8",
EXT_SOURCE_3 <= 0.9 ~ "0.8 - 0.9",
TRUE ~ "> 0.9"
))
# Combine the data into a long format for faceting
counts_df <- bind_rows(
app_train_clean_filtered %>%
filter(!is.na(EXT_SOURCE_1)) %>%
group_by(score_levels_1, TARGET) %>%
summarise(n = n(), .groups = 'drop') %>%
pivot_wider(names_from = TARGET, values_from = n, names_prefix = "n_TARGET_") %>%
mutate(percent_default = round((n_TARGET_1 / (n_TARGET_1 + n_TARGET_0)) * 100, 1)) %>%
rename(`Default_no` = `n_TARGET_0`, `Default_yes` = `n_TARGET_1`) %>%
mutate(Source = "EXT_SOURCE_1", score_levels = factor(score_levels_1, levels = c(
"0 - 0.1", "0.1 - 0.2", "0.2 - 0.3", "0.3 - 0.4", "0.4 - 0.5",
"0.5 - 0.6", "0.6 - 0.7", "0.7 - 0.8", "0.8 - 0.9", "> 0.9"
))),
app_train_clean_filtered %>%
filter(!is.na(EXT_SOURCE_2)) %>%
group_by(score_levels_2, TARGET) %>%
summarise(n = n(), .groups = 'drop') %>%
pivot_wider(names_from = TARGET, values_from = n, names_prefix = "n_TARGET_") %>%
mutate(percent_default = round((n_TARGET_1 / (n_TARGET_1 + n_TARGET_0)) * 100, 1)) %>%
rename(`Default_no` = `n_TARGET_0`, `Default_yes` = `n_TARGET_1`) %>%
mutate(Source = "EXT_SOURCE_2", score_levels = factor(score_levels_2, levels = c(
"0 - 0.1", "0.1 - 0.2", "0.2 - 0.3", "0.3 - 0.4", "0.4 - 0.5",
"0.5 - 0.6", "0.6 - 0.7", "0.7 - 0.8", "0.8 - 0.9", "> 0.9"
))),
app_train_clean_filtered %>%
filter(!is.na(EXT_SOURCE_3)) %>%
group_by(score_levels_3, TARGET) %>%
summarise(n = n(), .groups = 'drop') %>%
pivot_wider(names_from = TARGET, values_from = n, names_prefix = "n_TARGET_") %>%
mutate(percent_default = round((n_TARGET_1 / (n_TARGET_1 + n_TARGET_0)) * 100, 1)) %>%
rename(`Default_no` = `n_TARGET_0`, `Default_yes` = `n_TARGET_1`) %>%
mutate(Source = "EXT_SOURCE_3", score_levels = factor(score_levels_3, levels = c(
"0 - 0.1", "0.1 - 0.2", "0.2 - 0.3", "0.3 - 0.4", "0.4 - 0.5",
"0.5 - 0.6", "0.6 - 0.7", "0.7 - 0.8", "0.8 - 0.9", "> 0.9"
)))
) %>%
select(Source, score_levels, percent_default)
# Create the facet wrap plot with gradient colors and no legend
ggplot(counts_df, aes(x = score_levels, y = percent_default, fill = percent_default)) +
geom_bar(stat = "identity", alpha = 0.7) +
geom_text(aes(label = round(percent_default, 1)), position = position_dodge(width = 0.9), vjust = -0.5, size = 2.5) +
labs(title = "Percentage of Default by EXT_SOURCE Score Intervals",
x = "Score Intervals",
y = "Percentage of Default (%)") +
scale_fill_gradient(low = "lightblue", high = "firebrick") +
theme_minimal() +
theme(plot.title = element_text(size = 10)) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, size = 8),
axis.text.y = element_text(size = 8),
legend.position = "none"  # Remove the legend
) +
facet_wrap(~Source, scales = "free_x")
# Create the correlation matrix
cor_matrix <- cor(app_train_clean %>% select_if(is.numeric), use = "complete.obs")
# Extract the target correlations
target_correlations <- cor_matrix["TARGET", ]
# Remove the correlation of TARGET with itself (correlation of 1)
target_correlations <- target_correlations[names(target_correlations) != "TARGET"]
# Sort the correlations
sorted_correlations <- sort(target_correlations, decreasing = TRUE)
# Ten most positive correlations
knitr::kable(head(sorted_correlations, 10), caption = "Ten most Positive correlations")
# Sort the correlations
sorted_correlations <- sort(target_correlations)
# Ten most negative correlations
knitr::kable(head(sorted_correlations, 10), caption = "Ten most Negative correlations")
# Seed for reproducibility
set.seed(seed)
# Number of predictions
num_predictions <- nrow(app_train_clean)
# Probabilities for each class
prob_0 <- 0.92
prob_1 <- 0.08
# Generate random predictions based on the probabilities
random_predictions <- sample(c(0, 1), size = num_predictions, replace = TRUE, prob = c(prob_0, prob_1))
# Calculate accuracy
accuracy_random <- round(mean(random_predictions == app_train_clean$TARGET),2)
accuracy_random
# Generate the confusion matrix
conf_matrix <- confusionMatrix(as.factor(random_predictions), as.factor(app_train_clean$TARGET))
# Print the confusion matrix
conf_matrix
